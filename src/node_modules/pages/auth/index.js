import React, { useState, useEffect, useContext } from "react";
import { Link, Navigate, useLocation, useParams } from "react-router-dom";

import useFetch from 'hooks/useFetch';
import useLocalStorage from 'hooks/useLocalStorage';
import { CurrentUserContext } from 'contexts/currentUser';

const Auth = () => {
  
 
  const params = useParams();
  const { userId } = useParams();
  const location = useLocation();
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [username, setUsername] = useState('');
  const [isSuccessfullSubmit, setIsSuccessfullSubmit] = useState(false);
  const isLogin = location.pathname === '/login';
  const pageTitle = isLogin ? 'Sign in' : 'Sign up';
  const descriptionLink = isLogin ? '/register' : '/login';
  const descriptionText = isLogin ? 'Need an account?' : 'Have an account?';
  const apiUrl = isLogin ? '/users/login' : '/users';
  const [currentUserState, setCurrentUserState] = useContext(CurrentUserContext);

  // const [isSubmitting, setIsSubmitting] = useState(false);
  // const emailRef = useRef(null);

  const [{isLoading, response, error}, doFetch] = useFetch(apiUrl);
  const [token, setToken] = useLocalStorage('token');
  
  const handleSubmit = (evt) => {
    evt.preventDefault();

    // console.log('emailRef', emailRef.current.value);
    const user = isLogin ? { email, password } : { email, password, username }
    doFetch({
      method: 'post',
      data: {
        user
      }
    });
  }

  console.log('currentUserState', currentUserState);
  // {
  //   "user": {
  //       "email": "testuserreact@test",
  //       "username": "testuserreact", testuserreactpassword
  //       "bio": null,
  //       "image": "https://api.realworld.io/images/smiley-cyrus.jpeg",
  //       "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InRlc3R1c2VycmVhY3RAdGVzdCIsInVzZXJuYW1lIjoidGVzdHVzZXJyZWFjdCIsImlhdCI6MTY3MzI4NTQ0NCwiZXhwIjoxNjc4NDY5NDQ0fQ.6cp8o4eQXweGEERRnVkv3vwtxEmo8jjeOI8C1inPVjI"
  //   }
  // }

  useEffect(() => {
    if (!response) {
      return
    }
    console.log('response', response);
    // localStorage.setItem('token', response.user.token);
    setToken(response.user.token);
    setIsSuccessfullSubmit(true);
    setCurrentUserState(state => ({
      ...state,
      isLoggedIn: true,
      isLoading: false,
      currentUser: response.user
    }));
  }, [response]);

  if (isSuccessfullSubmit) {
    return  <Navigate to={"/"}/>
  }

  return (
    <div className="auth-page">
      <div className="container page">
        <div className="row">
          <div className="col-md-6 offset-md-3 col-xs-12">
            <h1 className="text-xs-center">{ pageTitle }</h1>
            <p className="text-xs-center">
              <Link to={ descriptionLink }>{ descriptionText }</Link>
            </p>
            <form onSubmit = { handleSubmit }>
              <fieldset>
                { !isLogin && (
                    <fieldset className="form-group">
                      <input 
                        type="text" 
                        className="form-control form-control-lg" 
                        placeholder="Username"
                        value = { username }
                        onChange = { evt => setUsername(evt.target.value) }
                      />
                    </fieldset>
                  ) 
                }
                <fieldset className="form-group">
                  <input 
                    type="email" 
                    className="form-control form-control-lg" 
                    placeholder="Email"
                    value = { email }
                    onChange = { evt => setEmail(evt.target.value) }
                    // ref = { emailRef }
                  />
                </fieldset>
                <fieldset className="form-group">
                  <input 
                    type="password" 
                    className="form-control form-control-lg" 
                    placeholder="Password"
                    value = { password }
                    onChange = { evt => setPassword(evt.target.value) }
                  />
                </fieldset>
                <button className="btn btn-lg btn-primary pull-xs-right" 
                  type="submit"
                  disabled = { isLoading }
                  >
                    { pageTitle }
                </button>
              </fieldset>
            </form>
          </div>
        </div>
      </div>
    </div>
  )
}

export default Auth;