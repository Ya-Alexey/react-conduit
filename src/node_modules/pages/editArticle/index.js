import React, { useEffect, useState, useContext } from "react";

import ArticleForm from "components/articleForm";
import useFetch from 'hooks/useFetch';
import { Navigate, useParams } from "react-router-dom";
import {CurrentUserContext} from "contexts/currentUser";

const EditArticle = () => {

    const [currentUserState] = useContext(CurrentUserContext);
    const {slug} = useParams();
    const apiUrl = `/articles/${slug}`;
    const [{response: fetchArticleResponse}, doFetchArticle] = useFetch(apiUrl);
    const [{response: updateArticleResponse, error: updateArticleError}, doUpdateArticle] = useFetch(apiUrl);
    const [initialValues, setInitialValues] = useState(null);
    const [isSuccessfullSubmit, setIsSuccessfullSubmit] = useState(false);
    

    const handleSubmit = (article) => {
        doUpdateArticle({
            method: 'put',
            data: {
                article
            }
        });
    }
    
    useEffect(() => {
        doFetchArticle();
    }, [doFetchArticle]);

    useEffect(() => {
        if (!fetchArticleResponse) {
            return
        }
        setInitialValues({
            title: fetchArticleResponse.article.title,
            body: fetchArticleResponse.article.body,
            description: fetchArticleResponse.article.description,
            tagList: fetchArticleResponse.article.tagList,
        });
    }, [fetchArticleResponse]);

    useEffect(() => {
        if (!updateArticleResponse) {
            return
        }
        setIsSuccessfullSubmit(true);
    }, [updateArticleResponse]);

    if (currentUserState.isLoggedIn === false) {
        return <Navigate to={`/`}/>
    }

    if (isSuccessfullSubmit) {
        return <Navigate to={`/articles/${updateArticleResponse.article.slug}`}/>
    }

    return (
        <ArticleForm 
            onSubmit={ handleSubmit }
            errors={ (updateArticleError && updateArticleError.errors) || {} }
            initialValues={initialValues}
        />
    )
}

export default EditArticle;
